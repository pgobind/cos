import com.ibm.mq.*;
import org.apache.spark.SparkConf;
import org.apache.spark.streaming.Duration;
import org.apache.spark.streaming.StreamingContext;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import org.apache.spark.streaming.receiver.Receiver;

import java.io.UnsupportedEncodingException;

public class MQStreamJob {
    public static void main(String[] args) throws InterruptedException {
        SparkConf conf = new SparkConf().setAppName("MQStreamJob");
        JavaStreamingContext ssc = new JavaStreamingContext(conf, new Duration(1800000)); // 30 minute batch interval
        JavaDStream<String> stream = ssc.receiverStream(new MQReceiver("mqhost", 1414, "mqchannel", "mqmanager", "mqqueue"));
        stream.print();
        ssc.start();
        ssc.awaitTermination();
    }

    public static class MQReceiver extends Receiver<String> {
        private MQQueueManager qmgr;
        private MQQueue queue;

        public MQReceiver(String host, int port, String channel, String queueManager, String queueName) {
            super(StorageLevel.MEMORY_AND_DISK_2());
            MQEnvironment.hostname = host;
            MQEnvironment.port = port;
            MQEnvironment.channel = channel;
            MQEnvironment.userID = "mquser";
            MQEnvironment.password = "mqpassword";
            MQEnvironment.sslCipherSuite = "TLS_RSA_WITH_AES_256_CBC_SHA256";
            MQEnvironment.sslFipsRequired = true;
            try {
                qmgr = new MQQueueManager(queueManager);
                queue = qmgr.accessQueue(queueName, MQC.MQOO_INPUT_SHARED);
            } catch (MQException e) {
                e.printStackTrace();
            }
        }

        public void onStart() {
            new Thread(this::receive).start();
        }

        public void onStop() {
            try {
                queue.close();
                qmgr.disconnect();
            } catch (MQException e) {
                e.printStackTrace();
            }
        }

        private void receive() {
            while (!isStopped()) {
                try {
                    MQMessage msg = new MQMessage();
                    MQGetMessageOptions gmo = new MQGetMessageOptions();
                    gmo.options = MQC.MQGMO_WAIT | MQC.MQGMO_CONVERT;
                    gmo.waitInterval = 1800000; // 30 minutes in milliseconds
                    queue.get(msg, gmo);
                    store(new String(msg.toByteArray(), "UTF-8"));
                } catch (MQException | UnsupportedEncodingException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
