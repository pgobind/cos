public class SimpleEncryption {
    public static void main(String[] args) {
        String originalText = "o694841";
        int shift = 3;

        // Encrypt the original string
        String encryptedText = encrypt(originalText, shift);
        System.out.println("Encrypted text: " + encryptedText);

        // Decrypt the encrypted string
        String decryptedText = decrypt(encryptedText, shift);
        System.out.println("Decrypted text: " + decryptedText);
    }

    public static String encrypt(String text, int shift) {
        StringBuilder encrypted = new StringBuilder();

        for (char c : text.toCharArray()) {
            if (Character.isAlphabetic(c)) {
                char base = Character.isLowerCase(c) ? 'a' : 'A';
                encrypted.append((char) ((c - base + shift) % 26 + base));
            } else if (Character.isDigit(c)) {
                encrypted.append("A").append(c).append("B"); // Add 'A' before and 'B' after the digit
            } else {
                encrypted.append(c);
            }
        }
        return encrypted.toString();
    }

    public static String decrypt(String text, int shift) {
        StringBuilder decrypted = new StringBuilder();

        for (int i = 0; i < text.length(); i++) {
            char c = text.charAt(i);

            if (Character.isAlphabetic(c)) {
                char base = Character.isLowerCase(c) ? 'a' : 'A';
                decrypted.append((char) ((c - base - shift + 26) % 26 + base));
            } else if (i < text.length() - 2 && text.charAt(i) == 'A' && text.charAt(i + 2) == 'B') {
                decrypted.append(text.charAt(i + 1));  // Extract the original digit
                i += 2;  // Skip the 'A' and 'B'
            } else {
                decrypted.append(c);
            }
        }
        return decrypted.toString();
    }
}
