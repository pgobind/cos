import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import java.time.Duration;
import java.time.Instant;

@Service
public class LockService {
    private final JdbcTemplate jdbcTemplate;

    public LockService(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    public boolean acquireSystemLock(String systemId) throws InterruptedException {
        Instant startTime = Instant.now();
        Duration timeout = Duration.ofMinutes(5);

        while (Duration.between(startTime, Instant.now()).compareTo(timeout) < 0) {
            if (!isUserLockPresent()) {
                // No user locks, place SYSTEM_LOCK
                jdbcTemplate.update("INSERT INTO system_locks (lock_type, system_id) VALUES ('SYSTEM_LOCK', ?)", systemId);
                System.out.println("SYSTEM_LOCK acquired by " + systemId);
                return true;
            }
            System.out.println("Waiting for USER_LOCK to clear...");
            Thread.sleep(5000); // Polling every 5 seconds
        }
        return false; // Timeout reached
    }

    public void releaseSystemLock(String systemId) {
        jdbcTemplate.update("DELETE FROM system_locks WHERE lock_type = 'SYSTEM_LOCK' AND system_id = ?", systemId);
        System.out.println("SYSTEM_LOCK released for " + systemId);
    }
}
