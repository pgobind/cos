import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.Duration;
import java.time.Instant;

@Service
public class LockService {
    private static final Logger logger = LoggerFactory.getLogger(LockService.class);
    private final JdbcTemplate jdbcTemplate;

    public LockService(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    /**
     * Acquires a SYSTEM_LOCK if no USER_LOCK is present, waiting for up to 5 minutes.
     */
    @Transactional
    public boolean acquireSystemLock(String systemId) {
        Instant startTime = Instant.now();
        Duration timeout = Duration.ofMinutes(5);

        try {
            while (Duration.between(startTime, Instant.now()).compareTo(timeout) < 0) {
                if (!isUserLockPresent()) {
                    // No user locks, place SYSTEM_LOCK
                    jdbcTemplate.update("INSERT INTO system_locks (lock_type, system_id) VALUES ('SYSTEM_LOCK', ?)", systemId);
                    logger.info("SYSTEM_LOCK acquired by {}", systemId);
                    return true;
                }
                logger.info("Waiting for USER_LOCK to clear...");
                Thread.sleep(5000); // Polling every 5 seconds
            }
            logger.warn("Timeout reached: Could not acquire SYSTEM_LOCK for {}", systemId);
            return false; // Timeout reached
        } catch (Exception e) {
            logger.error("Error while acquiring SYSTEM_LOCK for {}: {}", systemId, e.getMessage());
            throw new RuntimeException("Failed to acquire SYSTEM_LOCK", e);
        }
    }

    /**
     * Releases the SYSTEM_LOCK for the given system.
     */
    @Transactional
    public void releaseSystemLock(String systemId) {
        try {
            int rowsDeleted = jdbcTemplate.update("DELETE FROM system_locks WHERE lock_type = 'SYSTEM_LOCK' AND system_id = ?", systemId);
            if (rowsDeleted > 0) {
                logger.info("SYSTEM_LOCK released for {}", systemId);
            } else {
                logger.warn("No SYSTEM_LOCK found for {}", systemId);
            }
        } catch (Exception e) {
            logger.error("Error while releasing SYSTEM_LOCK for {}: {}", systemId, e.getMessage());
            throw new RuntimeException("Failed to release SYSTEM_LOCK", e);
        }
    }

    /**
     * Acquires a USER_LOCK for the given system.
     */
    @Transactional
    public void acquireUserLock(String systemId) {
        try {
            jdbcTemplate.update("INSERT INTO system_locks (lock_type, system_id) VALUES ('USER_LOCK', ?)", systemId);
            logger.info("USER_LOCK acquired by {}", systemId);
        } catch (Exception e) {
            logger.error("Error while acquiring USER_LOCK for {}: {}", systemId, e.getMessage());
            throw new RuntimeException("Failed to acquire USER_LOCK", e);
        }
    }

    /**
     * Releases the USER_LOCK for the given system.
     */
    @Transactional
    public void releaseUserLock(String systemId) {
        try {
            int rowsDeleted = jdbcTemplate.update("DELETE FROM system_locks WHERE lock_type = 'USER_LOCK' AND system_id = ?", systemId);
            if (rowsDeleted > 0) {
                logger.info("USER_LOCK released for {}", systemId);
            } else {
                logger.warn("No USER_LOCK found for {}", systemId);
            }
        } catch (Exception e) {
            logger.error("Error while releasing USER_LOCK for {}: {}", systemId, e.getMessage());
            throw new RuntimeException("Failed to release USER_LOCK", e);
        }
    }

    /**
     * Checks if any USER_LOCK is present in the system.
     */
    public boolean isUserLockPresent() {
        try {
            Integer count = jdbcTemplate.queryForObject("SELECT COUNT(*) FROM system_locks WHERE lock_type = 'USER_LOCK'", Integer.class);
            return count != null && count > 0;
        } catch (Exception e) {
            logger.error("Error while checking USER_LOCK presence: {}", e.getMessage());
            throw new RuntimeException("Failed to check USER_LOCK presence", e);
        }
    }
}
