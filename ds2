import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class DataSetProcessor {

    // Exact match logic
    private static List<Integer> exactSubsetIndices(List<Row> rows, int target) {
        List<Integer> sumsForRows = rows.stream()
                                        .map(row -> row.<Integer>getAs("am_pl_new"))
                                        .collect(Collectors.toList());

        int n = sumsForRows.size();
        Map<Integer, List<Integer>> dp = new HashMap<>();
        dp.put(0, new ArrayList<>());  // Empty subset

        IntStream.range(0, n).forEach(i -> {
            int num = sumsForRows.get(i);
            List<Integer> currentKeys = new ArrayList<>(dp.keySet()); // To avoid concurrent modification
            currentKeys.stream()
                       .filter(key -> key + num <= target && dp.get(key) != null)
                       .forEach(key -> {
                           List<Integer> subset = new ArrayList<>(dp.get(key));
                           subset.add(i);
                           dp.put(key + num, subset);
                       });
        });

        return dp.get(target);
    }

    // Closest match logic
    private static List<Integer> closestSubsetIndices(List<Row> rows, int target, double tolerance) {
        List<Integer> sumsForRows = rows.stream()
                                    .map(row -> row.<Integer>getAs("am_pl_new"))
                                    .collect(Collectors.toList());

        int n = sumsForRows.size();
        Map<Integer, List<Integer>> dp = new HashMap<>();
        dp.put(0, new ArrayList<>());  // Empty subset

        IntStream.range(0, n).forEach(i -> {
            int num = sumsForRows.get(i);
            List<Integer> currentKeys = new ArrayList<>(dp.keySet()); // To avoid concurrent modification
            currentKeys.stream()
                       .filter(key -> key + num <= target + tolerance && dp.get(key) != null)  // Account for tolerance in the upper limit
                       .forEach(key -> {
                           List<Integer> subset = new ArrayList<>(dp.get(key));
                           subset.add(i);
                           dp.put(key + num, subset);
                       });
        });

        return dp.entrySet().stream()
             .filter(entry -> Math.abs(entry.getKey() - target) <= tolerance)  // Only consider subsets within tolerance
             .min((e1, e2) -> {
                 int diff1 = Math.abs(e1.getKey() - target);
                 int diff2 = Math.abs(e2.getKey() - target);
                 if (diff1 == diff2) {
                     return e1.getValue().size() - e2.getValue().size();  // Tiebreaker: smallest size wins
                 }
                 return diff1 - diff2;
             })
             .map(Map.Entry::getValue)
             .orElse(null);
    }

    public static void processDatasets(Dataset<Row> ds1, Dataset<Row> ds2) {
        for (Row row2 : ds2.collectAsList()) {
            List<Row> matchingRowsForKeys = ds1.filter(ds1.col("instrumentID").equalTo(row2.getAs("instrumentID"))
                                             .and(ds1.col("id_cccy_iso").equalTo(row2.getAs("id_cccy_iso")))
                                             .and(ds1.col("am_pl_orig").equalTo(row2.getAs("am_pl_orig"))))
                                             .collectAsList();
            
            List<Integer> indices = exactSubsetIndices(matchingRowsForKeys, row2.<Integer>getAs("calculated_break"));
            
            if (indices != null) {
                // Exact match logic
                ds2 = ds2.withColumn("calculated_break", when(ds2.col("instrumentID").equalTo(row2.getAs("instrumentID"))
                                                              .and(ds2.col("id_cccy_iso").equalTo(row2.getAs("id_cccy_iso")))
                                                              .and(ds2.col("am_pl_orig").equalTo(row2.getAs("am_pl_orig"))), 0)
                                                         .otherwise(ds2.col("calculated_break")))
                         .withColumn("secondary_status", when(ds2.col("instrumentID").equalTo(row2.getAs("instrumentID"))
                                                               .and(ds2.col("id_cccy_iso").equalTo(row2.getAs("id_cccy_iso")))
                                                               .and(ds2.col("am_pl_orig").equalTo(row2.getAs("am_pl_orig"))), "clear")
                                                          .otherwise(ds2.col("secondary_status")));
            } else {
                // Handle the tolerance condition
                double tolerance = row2.<Double>getAs("am_tolerance");
                indices = closestSubsetIndices(matchingRowsForKeys, row2.<Integer>getAs("calculated_break"), tolerance);
                
                if (indices != null) {
                    ds2 = ds2.withColumn("od_status", when(ds2.col("instrumentID").equalTo(row2.getAs("instrumentID"))
                                                             .and(ds2.col("id_cccy_iso").equalTo(row2.getAs("id_cccy_iso")))
                                                             .and(ds2.col("am_pl_orig").equalTo(row2.getAs("am_pl_orig"))), "plugged")
                                                        .otherwise(ds2.col("od_status")))
                             .withColumn("secondary_status", when(ds2.col("instrumentID").equalTo(row2.getAs("instrumentID"))
                                                                  .and(ds2.col("id_cccy_iso").equalTo(row2.getAs("id_cccy_iso")))
                                                                  .and(ds2.col("am_pl_orig").equalTo(row2.getAs("am_pl_orig"))), "tolerated")
                                                             .otherwise(ds2.col("secondary_status")));
                }
            }
        }
    }
}
