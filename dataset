import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class SparkSubsetSolver {

    private static List<Integer> getRowSums(List<Row> rows) {
        return rows.stream()
                .map(row -> row.getAs("colc") + row.getAs("cold"))
                .collect(Collectors.toList());
    }

    private static List<Integer> getSubsetSum(List<Row> rows, int target) {
        List<Integer> sumsForRows = getRowSums(rows);

        List<Integer>[] dp = new ArrayList[target + 1];
        dp[0] = new ArrayList<>();

        IntStream.range(0, sumsForRows.size()).forEach(i -> {
            int num = sumsForRows.get(i);
            IntStream.rangeClosed(num, target).map(j -> target + num - j).forEachOrdered(j -> {
                if (dp[j - num] != null) {
                    List<Integer> subset = new ArrayList<>(dp[j - num]);
                    subset.add(i);
                    dp[j] = subset;
                }
            });
        });

        return IntStream.rangeClosed(0, target)
                .map(i -> target - i)
                .filter(i -> dp[i] != null)
                .mapToObj(i -> dp[i])
                .findFirst()
                .orElse(null);
    }

    public static List<Row> equalSubsetSum(List<Row> rows, int target) {
        List<Integer> subset = getSubsetSum(rows, target);
        return subset == null ? null : subset.stream().map(rows::get).collect(Collectors.toList());
    }

    public static List<Row> closestSubsetSum(List<Row> rows, int target) {
        return equalSubsetSum(rows, target); // Functionality is same, just renamed for clarity
    }

    public static void processDatasets(Dataset<Row> ds1, Dataset<Row> ds2) {
        // ... (the same code for iterating over unique values of a and filtering rows)

        List<Row> equalSumRows = equalSubsetSum(ds1RowsForA, targetValue);

        if (equalSumRows == null) {
            List<Row> closestSumRows = closestSubsetSum(ds1RowsForA, targetValue);
            // TODO: Annotate rows based on closest sum
        } else {
            // TODO: Annotate rows for exact match
        }
    }
}
