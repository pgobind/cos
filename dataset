import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class SparkSubsetSolver {

    private static List<Integer> getRowSums(List<Row> rows) {
        return rows.stream()
                .map(row -> row.getAs("col1"))
                .collect(Collectors.toList());
    }

    private static List<Integer> getSubsetSum(List<Row> rows, int target) {
        List<Integer> sumsForRows = getRowSums(rows);

        List<Integer>[] dp = new ArrayList[target + 1];
        dp[0] = new ArrayList<>();

        IntStream.range(0, sumsForRows.size()).forEach(i -> {
            int num = sumsForRows.get(i);
            IntStream.rangeClosed(num, target).map(j -> target + num - j).forEachOrdered(j -> {
                if (dp[j - num] != null) {
                    List<Integer> subset = new ArrayList<>(dp[j - num]);
                    subset.add(i);
                    dp[j] = subset;
                }
            });
        });

        return IntStream.rangeClosed(0, target)
                .map(i -> target - i)
                .filter(i -> dp[i] != null)
                .mapToObj(i -> dp[i])
                .findFirst()
                .orElse(null);
    }

    public static List<Row> closestSubsetSum(List<Row> rows, int target) {
        List<Integer> subsetIndices = getSubsetSum(rows, target);
        return subsetIndices == null ? null : subsetIndices.stream().map(rows::get).collect(Collectors.toList());
    }

    public static Map<String, List<Row>> processDatasets(Dataset<Row> ds1, Dataset<Row> ds2) {
        Map<String, List<Row>> result = new HashMap<>();

        // For each 'a' value in ds2
        ds2.collectAsList().forEach(rowDs2 -> {
            int targetValue = rowDs2.getAs("sum");
            String aValue = rowDs2.getAs("a");

            // Filter rows in ds1 where 'a' matches aValue
            List<Row> ds1RowsForA = ds1.filter(row -> row.getAs("a").equals(aValue)).collectAsList();

            List<Row> closestSubset = closestSubsetSum(ds1RowsForA, targetValue);

            if (closestSubset != null) {
                int closestSubsetSum = closestSubset.stream().mapToInt(row -> row.getAs("col1")).sum();
                if (closestSubsetSum == targetValue) {
                    result.put("Exact Match", closestSubset);
                } else {
                    result.put("Closest Match", closestSubset);
                }
            } else {
                result.put("No Closest Match", ds1RowsForA);
            }
        });

        return result;
    }
}
