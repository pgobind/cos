from pyspark.sql import SparkSession
from pyspark.sql.functions import col, lit, regexp_extract, coalesce, current_date

# Initialize Spark session
spark = SparkSession.builder.appName("SQL to Spark Conversion").getOrCreate()

# Assuming the DataFrame has already been created and is named rec_pl_3way_df
rec_pl_3way_df.createOrReplaceTempView("rec_pl_3way")

# Replace @recdate with the actual value you want to use
recdate = "2024-02-28"  # Example date, use the actual date you need

# Write the Spark SQL equivalent of the select statement
result_df = spark.sql(f"""
    SELECT
        '{recdate}' as recdate,
        t1.id_le,
        rtrim(regexp_extract(t1.id_desk, '\\d+', 0)) as trimmed_id_desk,
        NULL as column3,  -- Replace with actual column name or calculation
        NULL as column4,  -- Replace with actual column name or calculation
        t1.id_gmi_cust,
        t1.instrument_type,
        t1.id_ccy_iso,
        0.0 as column8,   -- Replace with actual column name or calculation
        0.0 as column9,   -- Replace with actual column name or calculation
        t1.am_gmi_mtd_pl,
        0.0 as am_tpl_usd_Lfwd,  -- Replace with actual column name or calculation
        0.0 as am_manual_cfwd,   -- Replace with actual column name or calculation
        coalesce(t1.am_rev_ln_gmi, 0) as am_rev_ln_gmi,
        coalesce(t1.am_rev_ln_union2, 0) as am_rev_ln_union2,
        0.0 as column14,  -- Replace with actual column name or calculation
        coalesce(t1.am_pl_perm, 0) as am_pl_perm,
        -1.5 as ETP_Phase2_1,  -- Replace with actual value or calculation
        -1.5 as ETP_Phase2_2,  -- Replace with actual value or calculation
        coalesce(t1.am_union2_perm, 0) as am_union2_perm
    FROM
        rec_pl_3way t1
    WHERE
        t1.dt_load_cob = '{recdate}'
        AND t1.am_gmi_mtd_pl >= 0.0
""")

result_df.show()  # or whatever operation you need to do with the result
